// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: member.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  membername,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING membername, hashed_password, full_name, email, password_changed_at, created_at
`

type CreateMemberParams struct {
	Membername     string `json:"membername"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.Membername,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT membername, hashed_password, full_name, email, password_changed_at, created_at FROM members
WHERE membername = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, membername string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, membername)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
